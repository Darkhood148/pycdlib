#!/usr/bin/python

import os
import sys
import cmd
import collections

import networkx
import matplotlib.pyplot

import pyiso

def usage():
    print("Usage: %s <isofile>" % (sys.argv[0]))

if len(sys.argv) != 2:
    usage()
    sys.exit(1)

iso = pyiso.PyIso()
fp = open(sys.argv[1], 'r')
iso.open(fp)

cwd = '/'
class PyIsoCmdLoop(cmd.Cmd):
    prompt = '(pyiso) '

    def help_exit(self):
        print("> exit")
        print("Exit the program.")

    def do_exit(self, line):
        if len(line) != 0:
            print("No parameters allowed for exit")
            return False
        return True

    def help_quit(self):
        print("> quit")
        print("Exit the program.")

    def do_quit(self, line):
        if len(line) != 0:
            print("No parameters allowed for quit")
            return False
        return True

    def do_EOF(self, line):
        print
        return True

    def help_ls(self):
        print("> ls")
        print("Show the contents of the current working directory. The format of the output is:\n")
        print("TYPE(F=file, D=directory) ISO9660_NAME (ROCKRIDGE_NAME) (Joliet name)")

    def do_ls(self, line):
        if len(line) != 0:
            print("No parameters allowed for ls")
            return

        global cwd
        for child in iso.list_dir(cwd):
            prefix = "F"
            if child.is_dir():
                prefix = "D"
            rr = ""
            if child.rock_ridge is not None and child.rock_ridge.name() != "":
                rr = " (%s" % (child.rock_ridge.name())
            if child.rock_ridge is not None and child.rock_ridge.is_symlink():
                rr += " -> %s)" % (child.rock_ridge.symlink_path())
            else:
                rr += ")"
            print("%s %s %s" % (prefix, child.file_identifier(), rr))

    def help_cd(self):
        print("> cd <iso_dir>")
        print("Change directory to <iso_dir> on the ISO.")

    def do_cd(self, line):
        global cwd

        split = line.split()
        if len(split) != 1:
            print("The cd command supports one and only one parameter")
            return

        directory = split[0]

        if directory == '/':
            tmp = '/'
        else:
            tmp = os.path.normpath(os.path.join(cwd, directory))

        rec = iso.get_entry(tmp)
        if not rec.is_dir():
            print("Entry %s is not a directory" % (directory))
            return

        cwd = tmp

    def help_get(self):
        print("> get <iso_file> <out_file>")
        print("Get the contents of <iso_file> from the ISO and write them to <out_file>.")

    def do_get(self, line):
        split = line.split()
        if len(split) != 2:
            print("The get command must be passed two parameters.")
            return

        iso_file = split[0]
        outfile = split[1]

        with open(outfile, 'w') as outfp:
            iso.get_and_write(iso_file, outfp)

    def help_cwd(self):
        print("> cwd")
        print("Show the current working directory.")

    def do_cwd(self, line):
        global cwd

        if len(line) != 0:
            print("No parameters allowed for cwd")
            return

        print(cwd)

    def help_write(self):
        print("> write <out_file>")
        print("Write the current ISO contents to <out_file>.")

    def do_write(self, line):
        split = line.split()
        if len(split) != 1:
            print("The write command supports one and only one parameter.")
            return

        out_name = split[0]

        with open(out_name, 'wb') as outfp:
            iso.write(outfp)

    def help_add_file(self):
        print("> add_file <iso_path> <src_filename>")
        print("Add the contents of <src_filename> to the ISO at the location specified in <iso_path>.")

    def do_add_file(self, line):
        split = line.split()
        if len(split) != 2:
            print("The add_file command needs two parameters (iso path and source file path).")
            return

        iso_path = split[0]
        src_path = split[1]

        # Note that we do not close out the file descriptor, as it needs to
        # be open when we do the write.
        infp = open(src_path, 'rb')
        iso.add_fp(infp, os.fstat(infp.fileno()).st_size, iso_path)

    def help_rm_file(self):
        print("> rm_file <iso_path>")
        print("Remove the contents of <iso_path> from the ISO.")

    def do_rm_file(self, line):
        split = line.split()
        if len(split) != 1:
            print("The rm_file command takes one and only one parameter (iso path).")
            return

        iso_path = split[0]

        iso.rm_file(iso_path)

    def help_mkdir(self):
        print("> mkdir <iso_path>")
        print("Make a new directory called <iso_path>.")

    def do_mkdir(self, line):
        split = line.split()
        if len(split) != 1:
            print("The mkdir command takes one and only one parameter (iso path).")
            return

        iso_path = split[0]

        iso.add_directory(iso_path)

    def help_rmdir(self):
        print("> rmdir <iso_path>")
        print("Remove the directory at <iso_path>.  Note that the directory must be empty for the command to succeed.")

    def do_rmdir(self, line):
        split = line.split()
        if len(split) != 1:
            print("The rmdir command takes one and only one parameter (iso path).")
            return

        iso_path = split[0]

        iso.rm_directory(iso_path)

    def help_graph(self):
        print("> graph")
        print("Print a graph representing the layout of the ISO.")

    def do_graph(self, line):
        if len(line) != 0:
            print("No parameters allowed for graph")
            return

        iso9660_graph = networkx.DiGraph()
        rr_graph = networkx.DiGraph()
        dirs = collections.deque([('/', '/')])
        while dirs:
            curr,rr_curr = dirs.popleft()
            for child in iso.list_dir(curr):
                if child.is_dot() or child.is_dotdot():
                    continue
                parent_ident = curr
                if parent_ident != '/':
                    parent_ident = parent_ident.split('/')[-1]
                iso9660_graph.add_edge(parent_ident, child.file_identifier())
                if child.rock_ridge is not None:
                    rr_graph.add_edge(child.parent.rock_ridge.name(), child.rock_ridge.name())
                if child.is_dir():
                    append = curr
                    rr_append = ""
                    if append[-1] != '/':
                        append += '/'
                    if rr_name != "":
                        rr_append = rr_curr
                        if rr_append[-1] != '/':
                            rr_append += '/'
                    dirs.append((append + child.file_identifier(), rr_append + child.rock_ridge.name()))

        isofig = matplotlib.pyplot.figure()
        isofig.suptitle('ISO9660')
        isofig.canvas.set_window_title('ISO9660')
        pos = networkx.graphviz_layout(iso9660_graph, prog='dot')
        networkx.draw_networkx(iso9660_graph, pos=pos, arrows=True)
        if len(rr_graph) > 0:
            rrfig = matplotlib.pyplot.figure()
            rrfig.suptitle('Rock Ridge')
            rrfig.canvas.set_window_title('Rock Ridge')
            pos = networkx.graphviz_layout(rr_graph, prog='dot')
            networkx.draw_networkx(rr_graph, pos=pos, arrows=True)
        matplotlib.pyplot.show()

done = False
while not done:
    try:
        PyIsoCmdLoop().cmdloop()
        done = True
    except Exception as e:
        print e

iso.close()
fp.close()
