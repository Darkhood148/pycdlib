#!/usr/bin/python

import os
import sys
import cmd

import pyiso

def usage():
    print("Usage: %s <isofile>" % (sys.argv[0]))

if len(sys.argv) != 2:
    usage()
    sys.exit(1)

iso = pyiso.PyIso()
fp = open(sys.argv[1], 'r')
iso.open(fp)

cwd = '/'
class PyIsoCmdLoop(cmd.Cmd):
    prompt = '(pyiso) '

    def help_exit(self):
        print("> exit")
        print("Exit the program.")

    def do_exit(self, line):
        if len(line) != 0:
            print("No parameters allowed for exit")
            return False
        return True

    def help_quit(self):
        print("> quit")
        print("Exit the program.")

    def do_quit(self, line):
        if len(line) != 0:
            print("No parameters allowed for quit")
            return False
        return True

    def do_EOF(self, line):
        print
        return True

    def help_ls(self):
        print("> ls")
        print("Show the contents of the current working directory. The format of the output is:\n")
        print("TYPE(F=file, D=directory) ISO9660_NAME (ROCKRIDGE_NAME)")

    def do_ls(self, line):
        if len(line) != 0:
            print("No parameters allowed for ls")
            return

        global cwd
        for f in iso.list_dir(cwd):
            prefix = "F"
            if f[1]:
                prefix = "D"
            rr = ""
            if f[2] != "":
                rr = " (%s)" % (f[2])
            print("%s %s %s" % (prefix, f[0], rr))

    def help_cd(self):
        print("> cd <iso_dir>")
        print("Change directory to <iso_dir> on the ISO.")

    def do_cd(self, line):
        global cwd

        split = line.split()
        if len(split) != 1:
            print("The cd command supports one and only one parameter")
            return

        dir = split[0]

        if dir == '.':
            tmp = cwd
        elif dir == '..':
            tmp = '/'.join(cwd.split('/')[:-1])
        elif dir == '/':
            tmp = '/'
        else:
            if dir[0] == '/':
                tmp = dir
            else:
                tmp = cwd + dir

        isdir = iso.get_entry(tmp)
        if not isdir:
            print("Entry %s is not a directory" % (dir))
            return

        cwd = tmp

    def help_get(self):
        print("> get <iso_file> <out_file>")
        print("Get the contents of <iso_file> from the ISO and write them to <out_file>.")

    def do_get(self, line):
        split = line.split()
        if len(split) != 2:
            print("The get command must be passed two parameters.")
            return

        iso_file = split[0]
        outfile = split[1]

        with open(outfile, 'w') as outfp:
            iso.get_and_write(iso_file, outfp)

    def help_cwd(self):
        print("> cwd")
        print("Show the current working directory.")

    def do_cwd(self, line):
        global cwd

        if len(line) != 0:
            print("No parameters allowed for cwd")
            return

        print(cwd)

    def help_write(self):
        print("> write <out_file>")
        print("Write the current ISO contents to <out_file>.")

    def do_write(self, line):
        split = line.split()
        if len(split) != 1:
            print("The write command supports one and only one parameter.")
            return

        out_name = split[0]

        with open(out_name, 'wb') as outfp:
            iso.write(outfp)

    def help_add_file(self):
        print("> add_file <iso_path> <src_filename>")
        print("Add the contents of <src_filename> to the ISO at the location specified in <iso_path>.")

    def do_add_file(self, line):
        split = line.split()
        if len(split) != 2:
            print("The add_file command needs two parameters (iso path and source file path).")
            return

        iso_path = split[0]
        src_path = split[1]

        # Note that we do not close out the file descriptor, as it needs to
        # be open when we do the write.
        infp = open(src_path, 'rb')
        iso.add_fp(infp, os.fstat(infp.fileno()).st_size, iso_path)

PyIsoCmdLoop().cmdloop()

iso.close()
fp.close()
